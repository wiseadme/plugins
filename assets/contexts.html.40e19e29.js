import{r as l,o as a,c as i,a as e,b as o,w as s,F as c,d as t,e as d}from"./app.2bad79ab.js";import{_ as r}from"./plugin-vue_export-helper.21dcd24c.js";const u={},h=e("h1",{id:"contexts",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#contexts","aria-hidden":"true"},"#"),t(" Contexts")],-1),_=e("p",null,[t("Contexts are groups of commands that can be combined to determine which commands are relevant or valid for the page's current state. By default, if a command does not have a context, it is in the "),e("code",null,"PluginBase.constants.contexts.Normal"),t(" context where most default commands live. LipSurf is always in "),e("b",null,"one or more"),t(" contexts.")],-1),m=e("p",null,"Example use cases:",-1),p=e("p",null,"Allowing certain commands only in certain situations.",-1),x=t("e.g. When we're watching a Netflix show, we want "),f=e("span",{class:"voice-cmd"},"play",-1),g=t(", "),w=e("span",{class:"voice-cmd"},"pause",-1),b=t(" etc. available. When we're browsing the Netflix catalogue, we don't want player commands, but we do want things like "),C=e("span",{class:"voice-cmd"},"next page",-1),y=t(". To handle this, we could watch for URL changes, and if we're on a page to watch a show, we could use "),v=e("code",null,"prependContext('Player Controls')",-1),N=t(" to add the context that the player controls are under."),B={class:"custom-container tip"},P=e("p",{class:"custom-container-title"},"NOTE",-1),k=t("Because we used "),A=e("code",null,"prependContext",-1),L=t(" the default commands will still work, because the Normal context remains in the context list."),D=e("p",null,"Limiting which commands are valid.",-1),I=t(`e.g. In the "Dictation" context, we don't want `),R=e("span",{class:"voice-cmd"},"youtube",-1),V=t(` to take us to youtube.com, we want it to literally write "youtube" where we're composing our text. In this case we don't want the "Normal" context, so we would `),E=e("code",null,'enterContext(["Dictation"])',-1),O=t(' to replace the current context with only "Dictation".'),S=e("p",null,"Contexts are per-tab. So the user may be in a dictation mode in one tab, and normal mode in another.",-1),T={class:"custom-container warning"},W=e("p",{class:"custom-container-title"},"WARNING",-1),j=t("Make sure to remove a context if it's specific to the plugin in the plugin's "),q=t("destroy"),F=t(" function."),M=d('<h2 id="context-order" tabindex="-1"><a class="header-anchor" href="#context-order" aria-hidden="true">#</a> Context Order</h2><p>Context order matters. If there are two <span class="voice-cmd">search *</span> commands, the one from the context earlier in the context list gets chosen.</p><h2 id="designating-a-context" tabindex="-1"><a class="header-anchor" href="#designating-a-context" aria-hidden="true">#</a> Designating a Context</h2><p>A context is &quot;created&quot; by designating:</p>',4),G=t("A command's "),U=e("code",null,"enterContext",-1),z=t(" property"),H=t("A plugin's "),J=e("code",null,"contexts",-1),K=t(" property"),Q=e("hr",null,null,-1),X=e("p",null,"Context can be manipulated programmatically using:",-1),Y=e("code",null,"PluginBase.util.enterContext",-1),Z=e("code",null,"PluginBase.util.prependContext",-1),$=e("code",null,"PluginBase.util.appendContext",-1),ee=e("code",null,"PluginBase.util.removeContext",-1),te=e("code",null,"PluginBase.util.getContext",-1),ne=e("h2",{id:"commands-outside-of-normal-mode",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#commands-outside-of-normal-mode","aria-hidden":"true"},"#"),t(" Commands Outside of Normal Mode")],-1),oe=t("By default, a command is in the "),se=e("code",null,"PluginBase.constants.contexts.Normal",-1),le=t(" (default) context unless "),ae=e("code",null,"normal: false",-1),ie=t(" is specified or a "),ce=e("code",null,"context",-1),de=t(" is specified that doesn't include "),re=e("code",null,"PluginBase.constants.contexts.Normal",-1),ue=t(".");function he(_e,me){const n=l("RouterLink");return a(),i(c,null,[h,_,m,e("ul",null,[e("li",null,[p,e("ul",null,[e("li",null,[x,f,g,w,b,C,y,o(n,{to:"/api-reference/pluginbase-util.html#prependContext"},{default:s(()=>[v]),_:1}),N])]),e("div",B,[P,e("p",null,[k,o(n,{to:"/api-reference/pluginbase-util.html#prependContext"},{default:s(()=>[A]),_:1}),L])])]),e("li",null,[D,e("ul",null,[e("li",null,[I,R,V,o(n,{to:"/api-reference/pluginbase-util.html#enterContext"},{default:s(()=>[E]),_:1}),O])])])]),S,e("div",T,[W,e("ul",null,[e("li",null,[j,o(n,{to:"/api-reference/plugin.html#destroy"},{default:s(()=>[q]),_:1}),F])])]),M,e("ul",null,[e("li",null,[G,o(n,{to:"/api-reference/command.html#entercontext"},{default:s(()=>[U,z]),_:1})]),e("li",null,[H,o(n,{to:"/api-reference/plugin.html#contexts"},{default:s(()=>[J,K]),_:1})])]),Q,X,e("ul",null,[e("li",null,[o(n,{to:"/api-reference/pluginbase-util.html#entercontext"},{default:s(()=>[Y]),_:1})]),e("li",null,[o(n,{to:"/api-reference/pluginbase-util.html#prependContext"},{default:s(()=>[Z]),_:1})]),e("li",null,[o(n,{to:"/api-reference/pluginbase-util.html#appendContext"},{default:s(()=>[$]),_:1})]),e("li",null,[o(n,{to:"/api-reference/pluginbase-util.html#removecontext"},{default:s(()=>[ee]),_:1})]),e("li",null,[o(n,{to:"/api-reference/pluginbase-util.html#getcontext"},{default:s(()=>[te]),_:1})])]),ne,e("p",null,[oe,se,le,o(n,{to:"/api-reference/command.html#normal"},{default:s(()=>[ae]),_:1}),ie,o(n,{to:"/api-reference/command.html#context"},{default:s(()=>[ce]),_:1}),de,re,ue])],64)}var fe=r(u,[["render",he]]);export{fe as default};
