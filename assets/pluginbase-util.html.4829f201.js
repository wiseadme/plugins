import{r as s,o as a,c as d,a as e,b as l,w as o,F as r,d as t,e as n}from"./app.2bad79ab.js";import{_ as c}from"./plugin-vue_export-helper.21dcd24c.js";const u={},h=e("h1",{id:"pluginbase-util",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#pluginbase-util","aria-hidden":"true"},"#"),t(" PluginBase.util")],-1),g=t("The following API exists on "),m=e("code",null,"PluginBase.util",-1),p=t(" for interacting with the extension and convenience. It can be used within plugins - some utilities are only available in the context of the page (will only work in "),_=e("a",{href:"#init"},[e("code",null,"init")],-1),x=t(", "),f=e("a",{href:"#destroy"},[e("code",null,"destroy")],-1),b=t(", "),v=e("code",null,"commands::pageFn",-1),y=t(") others only in the context of the extension ("),A=e("code",null,"fn",-1),R=t(")."),w=n('<hr><h3 id="shutdown" tabindex="-1"><a class="header-anchor" href="#shutdown" aria-hidden="true">#</a> shutdown</h3><ul><li>Arguments: <ul><li>None</li></ul></li><li>Returns: <code>void</code></li></ul><h3 id="pause" tabindex="-1"><a class="header-anchor" href="#pause" aria-hidden="true">#</a> pause</h3><ul><li>Arguments: <ul><li>None</li></ul></li><li>Returns: <code>void</code></li></ul><p>Pauses the speech recognizer, but leaves plugins and HUD un-destroyed. Shows a pause icon in the corner of the extension.</p><h3 id="start" tabindex="-1"><a class="header-anchor" href="#start" aria-hidden="true">#</a> start</h3><ul><li>Arguments: <ul><li>None</li></ul></li><li>Returns: <code>void</code></li></ul><hr><h3 id="getlanguage" tabindex="-1"><a class="header-anchor" href="#getlanguage" aria-hidden="true">#</a> getLanguage</h3><ul><li>Arguments: <ul><li>None</li></ul></li><li>Returns: <code>LanguageCode</code></li></ul><h3 id="setlanguage" tabindex="-1"><a class="header-anchor" href="#setlanguage" aria-hidden="true">#</a> setLanguage</h3><ul><li>Arguments: <ul><li><code>lang: LanguageCode</code></li></ul></li><li>Returns: <code>void</code></li></ul><hr><h3 id="entercontext" tabindex="-1"><a class="header-anchor" href="#entercontext" aria-hidden="true">#</a> enterContext</h3><ul><li>Arguments: <ul><li><code>contexts: string[]</code></li></ul></li><li>Returns: <code>void</code></li></ul><p>Modifies the context to be exactly what is specified in the argument. The order here matters (commands with a context earlier in the list get priority).</p>',17),C=t("Also see: "),T=t("Contexts"),k=t("."),S=e("h3",{id:"prependcontext",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#prependcontext","aria-hidden":"true"},"#"),t(" prependContext")],-1),z=e("ul",null,[e("li",null,[t("Arguments: "),e("ul",null,[e("li",null,[e("code",null,"contexts: string | string[]")])])]),e("li",null,[t("Returns: "),e("code",null,"void")])],-1),L=e("p",null,"Add context(s) to the beginning of the list of existing active contexts for this page (giving its commands more priority than contexts that follow) .",-1),N=t("See "),q=e("code",null,"appendContext",-1),F=t(" to give less priority to the commands. Also see: "),H=t("Contexts"),P=t("."),E=e("h3",{id:"appendcontext",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#appendcontext","aria-hidden":"true"},"#"),t(" appendContext")],-1),M=e("ul",null,[e("li",null,[t("Arguments: "),e("ul",null,[e("li",null,[e("code",null,"contexts: string | string[]")])])]),e("li",null,[t("Returns: "),e("code",null,"void")])],-1),U=e("p",null,"Add context(s) to the end of the list of existing active contexts for this page (giving its commands less priority than preceding contexts) .",-1),j=t("See "),I=e("code",null,"prependContext",-1),O=t(" to give more priority to the commands. Also see: "),B=t("Contexts"),D=t("."),V=e("h3",{id:"removecontext",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#removecontext","aria-hidden":"true"},"#"),t(" removeContext")],-1),G=e("ul",null,[e("li",null,[t("Arguments: "),e("ul",null,[e("li",null,[e("code",null,"contexts: string | string[]")])])]),e("li",null,[t("Returns: "),e("code",null,"void")])],-1),W=e("p",null,"Removes a context from the active contexts for this page.",-1),Q=t("Also see: "),J=t("Contexts"),K=t("."),X=e("h3",{id:"getcontext",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#getcontext","aria-hidden":"true"},"#"),t(" getContext")],-1),Y=e("ul",null,[e("li",null,[t("Arguments: "),e("ul",null,[e("li",null,"None")])]),e("li",null,[t("Returns: "),e("code",null,"string[]")])],-1),Z=e("p",null,"Gets the contexts that we're in on the current page.",-1),$=t("Also see: "),ee=t("Contexts"),te=t("."),ie=n('<hr><h3 id="queryallframes" tabindex="-1"><a class="header-anchor" href="#queryallframes" aria-hidden="true">#</a> queryAllFrames</h3><ul><li>Arguments: <ul><li><code>query: string</code></li><li><code>attrs?: string | string[]</code></li><li><code>props?: string | string[]</code></li><li><code>specialProps?: SpecialProp[]</code></li></ul></li><li>Returns: <code>Promise&lt;string, ...any[]&gt;</code></li></ul><p>Query all frames includes IFrames.</p><h3 id="posttoallframes" tabindex="-1"><a class="header-anchor" href="#posttoallframes" aria-hidden="true">#</a> postToAllFrames</h3><ul><li>Arguments: <ul><li><code>ids?: string | string[]</code></li><li><code>fnNames?: string | string[]</code></li><li><code>selector?</code></li><li><code>specialFns?: SpecialFn | SpecialFn[]</code></li></ul></li><li>Returns: <code>void</code></li></ul><hr><h3 id="pick" tabindex="-1"><a class="header-anchor" href="#pick" aria-hidden="true">#</a> pick</h3><ul><li>Arguments: <ul><li><code>obj: object</code></li><li><code>...props: string[]</code></li></ul></li><li>Returns: <code>object</code></li></ul><h3 id="deepsetarray" tabindex="-1"><a class="header-anchor" href="#deepsetarray" aria-hidden="true">#</a> deepSetArray</h3><ul><li>Arguments: <ul><li><code>obj: object</code></li><li><code>keys: string[]</code></li><li><code>value: any</code></li></ul></li><li>Returns: <code>object</code></li></ul><h3 id="memoize" tabindex="-1"><a class="header-anchor" href="#memoize" aria-hidden="true">#</a> memoize</h3><ul><li>Arguments: <ul><li><code>...any[]</code></li></ul></li><li>Returns: <code>any</code></li></ul><hr><h3 id="fuzzyhighscore" tabindex="-1"><a class="header-anchor" href="#fuzzyhighscore" aria-hidden="true">#</a> fuzzyHighScore</h3><ul><li>Arguments: <ul><li><code>query: string</code></li><li><code>sources: string[]</code></li><li><code>minScore?: number</code></li><li><code>partial?: boolean</code></li><li><code>skipCanonicalizing?: boolean</code></li></ul></li><li>Returns: <code>Promise&lt;[idx: number, score: number]&gt;</code></li></ul><h3 id="topfuzzyitemmatches-t" tabindex="-1"><a class="header-anchor" href="#topfuzzyitemmatches-t" aria-hidden="true">#</a> topFuzzyItemMatches&lt;T&gt;</h3><ul><li>Arguments: <ul><li><code>query: string</code></li><li><code>itemWTextColl: {item: T, text: string[]}[]</code></li><li><code>minScore?: number</code></li></ul></li><li>Returns: <code>Promise&lt;T[]&gt;</code></li></ul><p><code>T</code> is <code>any</code>. It is the type of the returned items that have a score greater than minScore.</p><hr><h3 id="highlight" tabindex="-1"><a class="header-anchor" href="#highlight" aria-hidden="true">#</a> highlight</h3><ul><li>Arguments: <ul><li><code>...els: HTMLElement[]</code></li></ul></li><li>Returns: <code>void</code></li></ul><h3 id="unhighlightall" tabindex="-1"><a class="header-anchor" href="#unhighlightall" aria-hidden="true">#</a> unhighlightAll</h3><ul><li>Arguments: <ul><li>None</li></ul></li><li>Returns: <code>void</code></li></ul><hr><h3 id="disambiguate" tabindex="-1"><a class="header-anchor" href="#disambiguate" aria-hidden="true">#</a> disambiguate</h3><ul><li>Arguments: <ul><li><code>els: HTMLElement[] | FrameElWOffsets[]</code></li></ul></li><li>Returns: <code>Promise&lt;[number, Promise&lt;void&gt;]&gt;</code></li></ul><hr><h3 id="clickorfocus" tabindex="-1"><a class="header-anchor" href="#clickorfocus" aria-hidden="true">#</a> clickOrFocus</h3><ul><li>Arguments: <ul><li><code>el: HTMLElement</code></li></ul></li><li>Returns: <code>void</code></li></ul><p>Intelligently &quot;clicks&quot; an element depending on the element type.</p><h3 id="isinviewandtakesspace" tabindex="-1"><a class="header-anchor" href="#isinviewandtakesspace" aria-hidden="true">#</a> isInViewAndTakesSpace</h3><ul><li>Arguments: <ul><li><code>el: HTMLElement</code></li></ul></li><li>Returns: <code>boolean</code></li></ul><p>Checks if an element is in the viewport and takes up view space (not 0x0 pixels)</p><h3 id="getrgb" tabindex="-1"><a class="header-anchor" href="#getrgb" aria-hidden="true">#</a> getRGB</h3><ul><li>Arguments: <ul><li><code>colorHexOrRgbStr: string</code></li></ul></li><li>Returns: <code>[red: number, green: number, blue: number]</code></li></ul><p>Used for getting color from computed css.</p><h3 id="getnocollisionuniqueattr" tabindex="-1"><a class="header-anchor" href="#getnocollisionuniqueattr" aria-hidden="true">#</a> getNoCollisionUniqueAttr</h3><ul><li>Arguments: <ul><li>None</li></ul></li><li>Returns: <code>string</code></li></ul><p>Use the string returned from here to keep everything under the LipSurf namespace and prevent page pollution/plugin collisions.</p><h3 id="getoptions" tabindex="-1"><a class="header-anchor" href="#getoptions" aria-hidden="true">#</a> getOptions</h3><ul><li>Arguments: <ul><li>None</li></ul></li><li>Returns: <code>Options</code></li></ul><p>Get all the user-set options.</p><div class="custom-container tip"><p class="custom-container-title">NOTE</p><p>Used by the &quot;help&quot; command to get the list of commands and generate the help overlay.</p></div><h3 id="gethudel" tabindex="-1"><a class="header-anchor" href="#gethudel" aria-hidden="true">#</a> getHUDEl</h3><ul><li>Arguments: <ul><li><code>obscureTags: boolean</code></li></ul></li><li>Returns: <code>Promise&lt;[hudEl: HTMLElement, hadToReattach: boolean]&gt;</code></li></ul><p>Get the shadow DOM element used for most LipSurf HUD elements. The HUD will be automatically removed when LipSurf is deactivated so you don&#39;t need to clean it up yourself.</p><h3 id="scrolltoanimated" tabindex="-1"><a class="header-anchor" href="#scrolltoanimated" aria-hidden="true">#</a> scrollToAnimated</h3><ul><li>Arguments: <ul><li><code>el: HTMLElement</code></li><li><code>offset?: number</code></li></ul></li><li>Returns: <code>void</code></li></ul><p>Smooth animated scroll to an element.</p>',50);function le(oe,ne){const i=s("RouterLink");return a(),d(r,null,[h,e("p",null,[g,m,p,_,x,f,b,l(i,{to:"/command.html#pagefn"},{default:o(()=>[v]),_:1}),y,l(i,{to:"/command.html#fn"},{default:o(()=>[A]),_:1}),R]),w,e("p",null,[C,l(i,{to:"/contexts.html"},{default:o(()=>[T]),_:1}),k]),S,z,L,e("p",null,[N,l(i,{to:"/contexts.html#appendContext"},{default:o(()=>[q]),_:1}),F,l(i,{to:"/contexts.html"},{default:o(()=>[H]),_:1}),P]),E,M,U,e("p",null,[j,l(i,{to:"/contexts.html#prependContext"},{default:o(()=>[I]),_:1}),O,l(i,{to:"/contexts.html"},{default:o(()=>[B]),_:1}),D]),V,G,W,e("p",null,[Q,l(i,{to:"/contexts.html"},{default:o(()=>[J]),_:1}),K]),X,Y,Z,e("p",null,[$,l(i,{to:"/contexts.html"},{default:o(()=>[ee]),_:1}),te]),ie],64)}var de=c(u,[["render",le]]);export{de as default};
