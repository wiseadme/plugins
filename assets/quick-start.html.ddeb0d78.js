import{r as t,o,c as p,a as n,b as l,w as c,F as r,e as a,d as s}from"./app.2bad79ab.js";import{_ as i}from"./plugin-vue_export-helper.21dcd24c.js";var u="/assets/developer-mode.22f57523.png",d="/assets/add-a-local-plugin.e33144a3.png",h="/assets/local-plugin-added.c7ab524e.png",m="/assets/hello-world-alert.981672ef.png",b="/assets/help-screen.f8d5000b.png";const g={},k=a(`<h1 id="_5-minute-quick-start" tabindex="-1"><a class="header-anchor" href="#_5-minute-quick-start" aria-hidden="true">#</a> 5 Minute Quick Start</h1><h2 id="hello-world-plugin" tabindex="-1"><a class="header-anchor" href="#hello-world-plugin" aria-hidden="true">#</a> Hello World Plugin</h2><p>Let&#39;s create a simple &quot;Hello World&quot; plugin that responds with a JavaScript alert &quot;Hello, Developer!&quot; when a user says <span class="voice-cmd">hello world</span>.</p><ol><li>Install the LipSurf CLI.</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> global <span class="token function">add</span> @lipsurf/cli
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="2"><li>Scaffold a project.</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>lipsurf-cli init HelloWorld <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> lipsurf-plugin-helloworld
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>The most important bit is the plugin created in <code>src/HelloWorld/HelloWorld.ts</code>. It should be something like this:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// lipsurf-plugin-helloworld/src/HelloWorld/HelloWorld.ts</span>
<span class="token comment">/// &lt;reference types=&quot;@lipsurf/types/extension&quot;/&gt;</span>
<span class="token keyword">declare</span> <span class="token keyword">const</span> PluginBase<span class="token operator">:</span> IPluginBase<span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token operator">&lt;</span>IPluginBase <span class="token operator">&amp;</span> IPlugin<span class="token operator">&gt;</span><span class="token punctuation">{</span>
  <span class="token operator">...</span>PluginBase<span class="token punctuation">,</span>
  <span class="token operator">...</span><span class="token punctuation">{</span>
    niceName<span class="token operator">:</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">,</span>
    description<span class="token operator">:</span> <span class="token string">&#39;A &quot;hello world&quot; plugin.&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// a RegEx that must match against the current tab&#39;s url for the plugin to be active (all of it&#39;s commands minus global commands)</span>
    match<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
    version<span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
    apiVersion<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    commands<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        name<span class="token operator">:</span> <span class="token string">&quot;Respond&quot;</span><span class="token punctuation">,</span>
        description<span class="token operator">:</span>
          <span class="token string">&quot;Respond with something incredibly insightful to the user.&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">// what the user actually has to say to run this command</span>
        match<span class="token operator">:</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">// the js that&#39;s run on the page</span>
        <span class="token function-variable function">pageFn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, Developer!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div>`,9),f=s("The meat of the plugin lives in the array of commands. Each "),v=s("Command"),_=s(" object has a "),y=n("code",null,"match",-1),q=s(" property for what the user needs to say to run it, a "),w=n("code",null,"pageFn",-1),x=s(" property for the code that's actually run and a bunch of meta properties like "),S=n("code",null,"name",-1),H=s(", "),L=n("code",null,"description",-1),T=s(" etc."),W=a(`<div class="custom-container tip"><p class="custom-container-title">NOTE</p><p>If you change the plugin id, &quot;HelloWorld&quot; in this case, make sure to change the directory name as well so it matches.</p></div><ol start="3"><li>Compile our TypeScript file and make the LipSurf plugin.</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">watch</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">NOTE</p><p>This will watch our *.ts files for changes and compile them to JavaScript, and finally a LipSurf plugin whenever a change is detected \u{1F603}</p></div><ol start="4"><li><p>Time to <em>load &#39;er up</em>. Open up Google Chrome and right click the LipSurf icon then &quot;Options&quot;.</p></li><li><p>Turn on &quot;Developer mode&quot; by checking its box.</p></li></ol><p><img src="`+u+'" alt="Screenshot of developer mode setting"></p><ol start="6"><li>Click &quot;Load a Local Plugin&quot; under &quot;Plugins&quot; and navigate to the compiled <code>.ls</code> file <code>dist/HelloWorld.1-0-0.0.ls</code>.</li></ol><div class="custom-container tip"><p class="custom-container-title">NOTE</p><p>The <code>ls</code> extension is special for LipSurf extensions. It&#39;s basically 3 JavaScript files rolled into one.</p></div><p><img src="'+d+'" alt="Screenshot of the &quot;Load a local plugin&quot; button."></p><br><p>\u{1F3C1} \xA0\xA0 <strong>That&#39;s it!</strong> \xA0\xA0 \u{1F3C1}</p><br><hr><h2 id="verifying" tabindex="-1"><a class="header-anchor" href="#verifying" aria-hidden="true">#</a> Verifying</h2><p>After a few seconds your plugin should appear in the plugins list if there were no installation problems.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Check the developer console (&lt;F12&gt;) for hints if there are installation issues.</p></div><p><img src="'+h+'" alt="Screenshot of the HelloWorld plugin in the list of plugins"></p><p>Now try saying <span class="voice-cmd">hello world</span> in any tab (since this plugin has a catch-all <code>/.*/</code> regex for the <code>match</code> property it should run on any non-special URL).</p><p>If everything went smoothly, you should see a JavaScript alert like this one:</p><p><img src="'+m+'" alt="Screenshot of &quot;Hello, Developer!&quot; alert box"></p><hr><p>You can also say <span class="voice-cmd">help</span> to see your new command listed in the auto-generated help overlay.</p><p><img src="'+b+'" alt="Screenshot of help cheat-sheet that now includes new &quot;hello world&quot; command"></p><hr><h2 id="what-s-next" tabindex="-1"><a class="header-anchor" href="#what-s-next" aria-hidden="true">#</a> What&#39;s Next</h2><p>If you think that&#39;s nifty, we&#39;ve just scratched the surface! LipSurf can handle homophones, dynamic match commands, multiple languages and more!</p><p>Check out the &quot;Advanced&quot; topics after you take a deep breath and regain your composure from all this excitement!</p>',27);function I(N,C){const e=t("RouterLink");return o(),p(r,null,[k,n("p",null,[f,l(e,{to:"/api-reference/command.html"},{default:c(()=>[v]),_:1}),_,y,q,w,x,S,H,L,T]),W],64)}var j=i(g,[["render",I]]);export{j as default};
