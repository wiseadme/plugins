import{e as n}from"./app.2bad79ab.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},e=n(`<h1 id="lipsurf-js" tabindex="-1"><a class="header-anchor" href="#lipsurf-js" aria-hidden="true">#</a> LipSurf.js</h1><p>LipSurf.js is a standalone script version of LipSurf that works entirely in-page without a supporting Chrome Extension. Plugins may be bundled with the LipSurf.js script.</p><h2 id="including-lipsurf-js" tabindex="-1"><a class="header-anchor" href="#including-lipsurf-js" aria-hidden="true">#</a> Including LipSurf.js</h2><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/path/to/lipsurf.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="quick-start" tabindex="-1"><a class="header-anchor" href="#quick-start" aria-hidden="true">#</a> Quick Start</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> lipsurf <span class="token operator">=</span> <span class="token function">LipSurf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
lipsurf<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
lipsurf<span class="token punctuation">.</span><span class="token function">handleTranscript</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">,</span> <span class="token number">0.99</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="initializing-lipsurf-js" tabindex="-1"><a class="header-anchor" href="#initializing-lipsurf-js" aria-hidden="true">#</a> Initializing LipSurf.js</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">var</span> lipsurf <span class="token operator">=</span> <span class="token function">LipSurf</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// default \`true\`</span>
  liveTs<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="methods" tabindex="-1"><a class="header-anchor" href="#methods" aria-hidden="true">#</a> Methods</h2><h3 id="handletranscript" tabindex="-1"><a class="header-anchor" href="#handletranscript" aria-hidden="true">#</a> <code>handleTranscript</code></h3><p>Sends STT generated transcript to LipSurf for processing and command execution.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
  * 
  * <span class="token keyword">@param</span> <span class="token parameter">transcript</span>
  * <span class="token keyword">@param</span> <span class="token parameter">confidence</span> between 0 and 1, 1 being the highest level of confidence
  * <span class="token keyword">@param</span> <span class="token parameter">isFinal</span> set to true if there will not be any subsequent adjustments 
  *     to this transcript
  * <span class="token keyword">@param</span> <span class="token parameter">segmentId</span> so we can identify if we&#39;re updating a previous 
  *     transcript (eg. with a higher confidence), or if we&#39;re adding newly said 
  *     things
  * <span class="token keyword">@param</span> <span class="token parameter">recgTime</span> when the transcript was generated in milliseconds since 
  *     UNIX epoch
  */</span>
<span class="token function">handleTranscript</span><span class="token punctuation">(</span>
		transcript<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
		confidence<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
		isFinal<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> 
		segmentId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
		recgTime<span class="token operator">:</span> <span class="token builtin">number</span>
	<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="start" tabindex="-1"><a class="header-anchor" href="#start" aria-hidden="true">#</a> <code>start</code></h3><p>Start listening.</p><h3 id="pause" tabindex="-1"><a class="header-anchor" href="#pause" aria-hidden="true">#</a> <code>pause</code></h3><p>Pauses LipSurf from listening, but does not turn it completely off (useful for keeping LipSurf generated UI on the screen).</p><h3 id="shutdown" tabindex="-1"><a class="header-anchor" href="#shutdown" aria-hidden="true">#</a> <code>shutdown</code></h3><p>Stops listening and all LipSurf generated UI removed.</p>`,18);function p(t,r){return e}var o=s(a,[["render",p]]);export{o as default};
